{"version":3,"sources":["context/shop-context.js","context/GlobalState.js","components/MainNavigation.js","pages/Products.js","pages/Cart.js","App.js","serviceWorker.js","store/reducers.js","store/actions.js","index.js"],"names":["React","createContext","products","id","title","price","cart","addProductToCart","product","removeProductFromCart","productId","GlobalState","state","console","log","updatedCart","updatedItemIndex","findIndex","item","push","quantity","updatedItem","setTimeout","setState","splice","Provider","value","this","props","children","Component","mainNavigation","className","NavLink","to","cartItemNumber","ProductsPage","Consumer","context","Fragment","reduce","count","curItem","map","key","onClick","bind","CartPage","length","cartItem","contextType","ShopContext","App","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","location","hostname","match","initialState","cartSum","shopReducer","action","type","payload","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4dda4ef4.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n  products: [\n    { id: 'p1', title: 'Gaming Mouse', price: 29.99 },\n    { id: 'p2', title: 'Harry Potter 3', price: 9.99 },\n    { id: 'p3', title: 'Used plastic bottle', price: 0.99 },\n    { id: 'p4', title: 'Half-dried plant', price: 2.99 }\n  ],\n  cart: [],\n  addProductToCart: product => {},\n  removeProductFromCart: productId => {}\n});","import React, { Component } from 'react';\n\nimport ShopContext from './shop-context';\n\nclass GlobalState extends Component {\n  state = {\n    products: [\n      { id: 'p1', title: 'Gaming Mouse', price: 29.99 },\n      { id: 'p2', title: 'Harry Potter 3', price: 9.99 },\n      { id: 'p3', title: 'Used plastic bottle', price: 0.99 },\n      { id: 'p4', title: 'Half-dried plant', price: 2.99 }\n    ],\n    cart: []\n  };\n\n  addProductToCart = product => {\n    console.log('Adding product', product);\n    const updatedCart = [...this.state.cart];\n    const updatedItemIndex = updatedCart.findIndex(\n      item => item.id === product.id\n    );\n\n    if (updatedItemIndex < 0) {\n      updatedCart.push({ ...product, quantity: 1 });\n    } else {\n      const updatedItem = {\n        ...updatedCart[updatedItemIndex]\n      };\n      updatedItem.quantity++;\n      updatedCart[updatedItemIndex] = updatedItem;\n    }\n    setTimeout(() => {\n      this.setState({ cart: updatedCart });\n    }, 700);\n  };\n\n  removeProductFromCart = productId => {\n    console.log('Removing product with id: ' + productId);\n    const updatedCart = [...this.state.cart];\n    const updatedItemIndex = updatedCart.findIndex(\n      item => item.id === productId\n    );\n\n    const updatedItem = {\n      ...updatedCart[updatedItemIndex]\n    };\n    updatedItem.quantity--;\n    if (updatedItem.quantity <= 0) {\n      updatedCart.splice(updatedItemIndex, 1);\n    } else {\n      updatedCart[updatedItemIndex] = updatedItem;\n    }\n    setTimeout(() => {\n      this.setState({ cart: updatedCart });\n    }, 700);\n  };\n\n  render() {\n    return (\n      <ShopContext.Provider\n        value={{\n          products: this.state.products,\n          cart: this.state.cart,\n          addProductToCart: this.addProductToCart,\n          removeProductFromCart: this.removeProductFromCart\n        }}\n      >\n        {this.props.children}\n      </ShopContext.Provider>\n    );\n  }\n}\n\nexport default GlobalState;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './MainNavigation.css';\n\nconst mainNavigation = props => (\n  <header className=\"main-navigation\">\n    <nav>\n      <ul>\n        <li>\n          <NavLink to=\"/\">Products</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/cart\">Cart ({props.cartItemNumber})</NavLink>\n        </li>\n      </ul>\n    </nav>\n  </header>\n);\n\nexport default mainNavigation;","import React, { Component } from 'react';\nimport ShopContext from '../context/shop-context';\nimport MainNavigation from '../components/MainNavigation';\nimport './Products.css';\nclass ProductsPage extends Component {\n  render() {\n    return (\n      <ShopContext.Consumer>\n        { context => (\n          <React.Fragment>\n            <MainNavigation\n              cartItemNumber={ context.cart.reduce((count, curItem) => {\n                return count + curItem.quantity;\n              }, 0) }\n            />\n            <main className=\"products\">\n              <ul>\n                { context.products.map(product => (\n                  <li key={ product.id }>\n                    <div>\n                      <strong>{ product.title }</strong> - ${ product.price }\n                    </div>\n                    <div>\n                      <button\n                        onClick={ context.addProductToCart.bind(this, product) }\n                      >\n                        Add to Cart\n                      </button>\n                    </div>\n                  </li>\n                )) }\n              </ul>\n            </main>\n          </React.Fragment>\n        ) }\n      </ShopContext.Consumer>\n    );\n  }\n}\n\nexport default ProductsPage;","import React, { Component } from 'react';\n\nimport ShopContext from '../context/shop-context';\nimport MainNavigation from '../components/MainNavigation';\nimport './Cart.css';\n\nclass CartPage extends Component {\n  static contextType = ShopContext;\n\n  componentDidMount() {\n    console.log(this.context);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <MainNavigation\n          cartItemNumber={ this.context.cart.reduce((count, curItem) => {\n            return count + curItem.quantity;\n          }, 0) }\n        />\n        <main className=\"cart\">\n          { this.context.cart.length <= 0 && <p>No Item in the Cart!</p> }\n          <ul>\n            { this.context.cart.map(cartItem => (\n              <li key={ cartItem.id }>\n                <div>\n                  <strong>{ cartItem.title }</strong> - ${ cartItem.price } (\n                  { cartItem.quantity })\n                </div>\n                <div>\n                  <button\n                    onClick={ this.context.removeProductFromCart.bind(\n                      this,\n                      cartItem.id\n                    ) }\n                  >\n                    Remove from Cart\n                  </button>\n                </div>\n              </li>\n            )) }\n          </ul>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CartPage;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport GlobalState from './context/GlobalState';\nimport ProductsPage from './pages/Products';\nimport CartPage from './pages/Cart';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <GlobalState>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" component={ProductsPage} exact />\n            <Route path=\"/cart\" component={CartPage} exact />\n          </Switch>\n        </BrowserRouter>\n      </GlobalState>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","   \nimport { ADD_PRODUCT_TO_CART, REMOVE_PRODUCT_FROM_CART } from './actions';\n\nconst initialState = {\n  products: [\n    { id: 'p1', title: 'Gaming Mouse', price: 29.99 },\n    { id: 'p2', title: 'Harry Potter 3', price: 9.99 },\n    { id: 'p3', title: 'Used plastic bottle', price: 0.99 },\n    { id: 'p4', title: 'Half-dried plant', price: 2.99 }\n  ],\n  cart: [],\n  cartSum: 0\n};\n\nconst shopReducer = (state = initialState, action) => {\n  let updatedCart;\n  let updatedItemIndex;\n  switch (action.type) {\n    case ADD_PRODUCT_TO_CART:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(\n        item => item.id === action.payload.id\n      );\n\n      if (updatedItemIndex < 0) {\n        updatedCart.push({ ...action.payload, quantity: 1 });\n      } else {\n        const updatedItem = {\n          ...updatedCart[updatedItemIndex]\n        };\n        updatedItem.quantity++;\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n      return { ...state, cart: updatedCart };\n    case REMOVE_PRODUCT_FROM_CART:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(\n        item => item.id === action.payload\n      );\n\n      const updatedItem = {\n        ...updatedCart[updatedItemIndex]\n      };\n      updatedItem.quantity--;\n      if (updatedItem.quantity <= 0) {\n        updatedCart.splice(updatedItemIndex, 1);\n      } else {\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n\n      return { ...state, cart: updatedCart };\n    default:\n      return state;\n  }\n};\n\nexport default shopReducer;","export const ADD_PRODUCT_TO_CART = 'ADD_PRODUCT_TO_CART';\nexport const REMOVE_PRODUCT_FROM_CART = 'REMOVE_PRODCUT_FROM_CART';\n\nexport const addProductToCart = product => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: ADD_PRODUCT_TO_CART,\n        payload: product\n      });\n    }, 700);\n  };\n};\n\nexport const removeProductFromCart = productId => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: REMOVE_PRODUCT_FROM_CART,\n        payload: productId\n      });\n    }, 700);\n  };\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport shopReducer from './store/reducers';\n\nconst store = createStore(shopReducer, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}