{"version":3,"sources":["components/MainNavigation.js","pages/Products.js","store/actions.js","pages/Cart.js","App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["mainNavigation","props","className","NavLink","to","cartItemNumber","ProductsPage","Fragment","this","cartItemCount","products","map","product","key","id","title","price","onClick","addProductToCart","bind","Component","connect","state","cart","reduce","count","curItem","quantity","dispatch","setTimeout","type","payload","CartPage","productId","cartItems","length","cartItem","handleRemoveProduct","App","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","location","hostname","match","initialState","cartSum","shopReducer","updatedCart","updatedItemIndex","action","findIndex","item","push","updatedItem","splice","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iaAoBeA,G,MAfQ,SAAAC,GAAK,OAC1B,4BAAQC,UAAU,mBAChB,6BACE,4BACE,4BACE,kBAACC,EAAA,EAAD,CAASC,GAAG,KAAZ,aAEF,4BACE,kBAACD,EAAA,EAAD,CAASC,GAAG,SAAZ,SAA2BH,EAAMI,eAAjC,WCNJC,G,6KACM,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAgBF,eAAgBG,KAAKP,MAAMQ,gBAC3C,0BAAMP,UAAU,YACd,4BACGM,KAAKP,MAAMS,SAASC,KAAI,SAAAC,GAAO,OAC9B,wBAAIC,IAAKD,EAAQE,IACf,6BACE,gCAASF,EAAQG,OADnB,OACuCH,EAAQI,OAE/C,6BACE,4BACEC,QAAS,EAAKhB,MAAMiB,iBAAiBC,KAAK,EAAMP,IADlD,2B,GAbSQ,cA2CZC,eAfS,SAAAC,GACtB,MAAO,CACLZ,SAAUY,EAAMZ,SAChBD,cAAea,EAAMC,KAAKC,QAAO,SAACC,EAAOC,GACvC,OAAOD,EAAQC,EAAQC,WACtB,OAIoB,SAAAC,GACzB,MAAO,CACLV,iBAAkB,SAAAN,GAAO,OAAIgB,EC3CD,SAAAhB,GAC9B,OAAO,SAAAgB,GACLC,YAAW,WACTD,EAAS,CACPE,KAP2B,sBAQ3BC,QAASnB,MAEV,MDoCmCM,CAAiBN,QAI5CS,CAGbf,GE9CI0B,G,wLAEgBlB,GDKe,IAAAmB,ECJjCzB,KAAKP,MAAM2B,UDIsBK,ECJSnB,EDKrC,SAAAc,GACLC,YAAW,WACTD,EAAS,CACPE,KAjBgC,2BAkBhCC,QAASE,MAEV,U,+BCTK,IAAD,OACP,OACE,kBAAC,IAAM1B,SAAP,KACE,kBAAC,EAAD,CAAgBF,eAAiBG,KAAKP,MAAMQ,gBAC5C,0BAAMP,UAAU,QACZM,KAAKP,MAAMiC,UAAUC,QAAU,GAAK,mDACtC,4BACI3B,KAAKP,MAAMiC,UAAUvB,KAAI,SAAAyB,GAAQ,OACjC,wBAAIvB,IAAMuB,EAAStB,IACjB,6BACE,gCAAUsB,EAASrB,OADrB,OAC2CqB,EAASpB,MADpD,KAEIoB,EAAST,SAFb,KAIA,6BACE,4BACEV,QACE,EAAKoB,oBAAoBlB,KAAK,EAAMiB,EAAStB,KAFjD,gC,GAnBKM,cA8CRC,eAVS,SAAAC,GACtB,MAAO,CACLY,UAAWZ,EAAMC,KACjBd,cAAea,EAAMC,KAAKC,QAAO,SAACC,EAAOC,GACvC,OAAOD,EAAQC,EAAQC,WACtB,MAKQN,CAEbW,GCnCaM,G,6KAXX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWrC,EAAcsC,OAAK,IAC9C,kBAACH,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWX,EAAUY,OAAK,U,GANtCxB,cCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCfAC,EAAe,CACnBxC,SAAU,CACR,CAAEI,GAAI,KAAMC,MAAO,eAAgBC,MAAO,OAC1C,CAAEF,GAAI,KAAMC,MAAO,iBAAkBC,MAAO,MAC5C,CAAEF,GAAI,KAAMC,MAAO,sBAAuBC,MAAO,KACjD,CAAEF,GAAI,KAAMC,MAAO,mBAAoBC,MAAO,OAEhDO,KAAM,GACN4B,QAAS,GA6CIC,EA1CK,WAAmC,IACjDC,EACAC,EAFehC,EAAiC,uDAAzB4B,EAAcK,EAAW,uCAGpD,OAAQA,EAAOzB,MACb,IJlB+B,sBIwB7B,IAJAwB,GADAD,EAAW,YAAO/B,EAAMC,OACOiC,WAC7B,SAAAC,GAAI,OAAIA,EAAK3C,KAAOyC,EAAOxB,QAAQjB,OAGd,EACrBuC,EAAYK,KAAZ,eAAsBH,EAAOxB,QAA7B,CAAsCJ,SAAU,SAC3C,CACL,IAAMgC,EAAW,eACZN,EAAYC,IAEjBK,EAAYhC,WACZ0B,EAAYC,GAAoBK,EAElC,OAAO,eAAKrC,EAAZ,CAAmBC,KAAM8B,IAC3B,IJjCoC,2BImClCC,GADAD,EAAW,YAAO/B,EAAMC,OACOiC,WAC7B,SAAAC,GAAI,OAAIA,EAAK3C,KAAOyC,EAAOxB,WAG7B,IAAM4B,EAAW,eACZN,EAAYC,IASjB,OAPAK,EAAYhC,WACRgC,EAAYhC,UAAY,EAC1B0B,EAAYO,OAAON,EAAkB,GAErCD,EAAYC,GAAoBK,EAG3B,eAAKrC,EAAZ,CAAmBC,KAAM8B,IAC3B,QACE,OAAO/B,ICxCPuC,EAAQC,YAAYV,EAAaW,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAQA,GAChB,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.635c33d0.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './MainNavigation.css';\n\nconst mainNavigation = props => (\n  <header className=\"main-navigation\">\n    <nav>\n      <ul>\n        <li>\n          <NavLink to=\"/\">Products</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/cart\">Cart ({props.cartItemNumber})</NavLink>\n        </li>\n      </ul>\n    </nav>\n  </header>\n);\n\nexport default mainNavigation;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport MainNavigation from '../components/MainNavigation';\nimport { addProductToCart } from '../store/actions';\nimport './Products.css';\n\nclass ProductsPage extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <MainNavigation cartItemNumber={this.props.cartItemCount} />\n        <main className=\"products\">\n          <ul>\n            {this.props.products.map(product => (\n              <li key={product.id}>\n                <div>\n                  <strong>{product.title}</strong> - ${product.price}\n                </div>\n                <div>\n                  <button\n                    onClick={this.props.addProductToCart.bind(this, product)}\n                  >\n                    Add to Cart\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    cartItemCount: state.cart.reduce((count, curItem) => {\n      return count + curItem.quantity;\n    }, 0)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addProductToCart: product => dispatch(addProductToCart(product))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductsPage);","export const ADD_PRODUCT_TO_CART = 'ADD_PRODUCT_TO_CART';\nexport const REMOVE_PRODUCT_FROM_CART = 'REMOVE_PRODCUT_FROM_CART';\n\nexport const addProductToCart = product => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: ADD_PRODUCT_TO_CART,\n        payload: product\n      });\n    }, 700);\n  };\n};\n\nexport const removeProductFromCart = productId => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: REMOVE_PRODUCT_FROM_CART,\n        payload: productId\n      });\n    }, 700);\n  };\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport MainNavigation from '../components/MainNavigation';\nimport { removeProductFromCart } from '../store/actions';\nimport './Cart.css';\n\nclass CartPage extends Component {\n\n  handleRemoveProduct(id) {\n    this.props.dispatch(removeProductFromCart(id))\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <MainNavigation cartItemNumber={ this.props.cartItemCount } />\n        <main className=\"cart\">\n          { this.props.cartItems.length <= 0 && <p>No Item in the Cart!</p> }\n          <ul>\n            { this.props.cartItems.map(cartItem => (\n              <li key={ cartItem.id }>\n                <div>\n                  <strong>{ cartItem.title }</strong> - ${ cartItem.price } (\n                  { cartItem.quantity })\n                </div>\n                <div>\n                  <button\n                    onClick={\n                      this.handleRemoveProduct.bind(this, cartItem.id)\n                    }\n                  >\n                    Remove from Cart\n                  </button>\n                </div>\n              </li>\n            )) }\n          </ul>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.cart,\n    cartItemCount: state.cart.reduce((count, curItem) => {\n      return count + curItem.quantity;\n    }, 0)\n  };\n};\n\n\nexport default connect(\n  mapStateToProps,\n)(CartPage);","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport ProductsPage from './pages/Products';\nimport CartPage from './pages/Cart';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={ProductsPage} exact />\n          <Route path=\"/cart\" component={CartPage} exact />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","   \nimport { ADD_PRODUCT_TO_CART, REMOVE_PRODUCT_FROM_CART } from './actions';\n\nconst initialState = {\n  products: [\n    { id: 'p1', title: 'Gaming Mouse', price: 29.99 },\n    { id: 'p2', title: 'Harry Potter 3', price: 9.99 },\n    { id: 'p3', title: 'Used plastic bottle', price: 0.99 },\n    { id: 'p4', title: 'Half-dried plant', price: 2.99 }\n  ],\n  cart: [],\n  cartSum: 0\n};\n\nconst shopReducer = (state = initialState, action) => {\n  let updatedCart;\n  let updatedItemIndex;\n  switch (action.type) {\n    case ADD_PRODUCT_TO_CART:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(\n        item => item.id === action.payload.id\n      );\n\n      if (updatedItemIndex < 0) {\n        updatedCart.push({ ...action.payload, quantity: 1 });\n      } else {\n        const updatedItem = {\n          ...updatedCart[updatedItemIndex]\n        };\n        updatedItem.quantity++;\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n      return { ...state, cart: updatedCart };\n    case REMOVE_PRODUCT_FROM_CART:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(\n        item => item.id === action.payload\n      );\n\n      const updatedItem = {\n        ...updatedCart[updatedItemIndex]\n      };\n      updatedItem.quantity--;\n      if (updatedItem.quantity <= 0) {\n        updatedCart.splice(updatedItemIndex, 1);\n      } else {\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n\n      return { ...state, cart: updatedCart };\n    default:\n      return state;\n  }\n};\n\nexport default shopReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport shopReducer from './store/reducers';\n\nconst store = createStore(shopReducer, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}